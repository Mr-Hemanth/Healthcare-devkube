version: '3.8'

services:
  # Data Tier - MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: healthcare-mongodb
    restart: always
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: mongopassword
      MONGO_INITDB_DATABASE: healthcare
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
    networks:
      - healthcare-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Application Tier - Node.js Backend
  backend:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: healthcare-backend
    restart: always
    ports:
      - "5002:5002"
    environment:
      NODE_ENV: development
      PORT: 5002
      MONGODB_URI: mongodb://admin:mongopassword@mongodb:27017/healthcare?authSource=admin
      MONGODB_ATLAS_URI: mongodb+srv://devops:devops@devops.o4ykiod.mongodb.net/?retryWrites=true&w=majority&appName=devops
      CORS_ORIGIN: http://localhost:3000
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - healthcare-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5002/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Presentation Tier - React Frontend
  frontend:
    build:
      context: ./client
      dockerfile: Dockerfile
    container_name: healthcare-frontend
    restart: always
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: development
      REACT_APP_API_BASE_URL: http://localhost:5002
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - healthcare-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: healthcare-prometheus
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    networks:
      - healthcare-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:10.2.0
    container_name: healthcare-grafana
    restart: always
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: grafana123
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    networks:
      - healthcare-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  mongodb_data:
    driver: local
  mongodb_config:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  healthcare-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16