pipeline {
    agent any

    environment {
        PROJECT_ID = 'hc-3-monitoring'
        CLUSTER_NAME = 'healthcare3-cluster'
        CLUSTER_LOCATION = 'asia-south1'
        REGISTRY_HOSTNAME = 'asia-south1-docker.pkg.dev'
        REPOSITORY_NAME = 'healthcare-repo'
        SERVICE_ACCOUNT_KEY = credentials('gcp-service-account-key')
        USE_GKE_GCLOUD_AUTH_PLUGIN = 'True'
        PATH = "/usr/local/bin:/snap/bin:/usr/sbin:/usr/bin:/sbin:/bin:$PATH"
    }

    stages {
        stage('Checkout') {
            steps {
                echo 'üöÄ Starting Healthcare 3-Tier Atlas Pipeline...'
                echo '======================================================'
                echo 'üèóÔ∏è Architecture: Frontend ‚Üí Backend ‚Üí MongoDB Atlas'
                echo 'üè• Application: Healthcare Management System'
                echo '‚òÅÔ∏è Database: MongoDB Atlas (Cloud - NO LOCAL DB)'
                echo 'üéØ Target: GKE Autopilot Cluster'
                echo "üìã Build Number: ${BUILD_NUMBER}"
                echo "üåø Branch: ${env.GIT_BRANCH}"
                echo "üîó Repository: ${env.GIT_URL}"
                echo '======================================================'
                checkout scm

                echo 'üìÇ Workspace Contents:'
                sh 'find . -name "*.yml" -o -name "*.yaml" | head -10'
                echo 'üîç Checking for Atlas configuration files...'
                sh 'ls -la k8s/atlas-*.yaml || echo "‚ö†Ô∏è Atlas config files not found"'
            }
        }

        stage('Verify Prerequisites') {
            steps {
                script {
                    echo 'Verifying all required tools are properly installed...'
                    sh '''
                        echo "=== üîç ATLAS ENVIRONMENT VERIFICATION ==="
                        echo "Current user: $(whoami)"
                        echo "Working directory: $(pwd)"
                        echo "Build number: ${BUILD_NUMBER}"
                        echo "Git commit: $(git rev-parse --short HEAD)"
                        echo "Timestamp: $(date)"

                        echo "=== üõ†Ô∏è TOOL VERIFICATION ==="
                        echo "Node.js: $(node --version)"
                        echo "npm: $(npm --version)"
                        echo "Docker: $(docker --version)"
                        echo "gcloud: $(/usr/local/bin/gcloud --version | head -1)"
                        echo "kubectl: $(/usr/local/bin/kubectl version --client | head -1)"

                        echo "=== üóÑÔ∏è DATABASE CONFIGURATION CHECK ==="
                        if grep -q "mongodb+srv" server/server.js; then
                            echo "‚úÖ Atlas connection found in backend"
                        else
                            echo "‚ùå Atlas connection NOT found in backend"
                        fi

                        if [ -f "k8s/atlas-complete-deployment.yaml" ]; then
                            echo "‚úÖ Atlas Kubernetes config found"
                        else
                            echo "‚ùå Atlas Kubernetes config NOT found"
                        fi

                        echo "‚úÖ All prerequisites verified for Atlas deployment!"
                    '''
                }
            }
        }

        stage('Setup GCP Authentication') {
            steps {
                script {
                    echo 'Setting up GCP authentication...'
                    sh '''
                        export USE_GKE_GCLOUD_AUTH_PLUGIN=True
                        /usr/local/bin/gcloud auth activate-service-account --key-file=${SERVICE_ACCOUNT_KEY}
                        /usr/local/bin/gcloud config set project ${PROJECT_ID}
                        /usr/local/bin/gcloud auth configure-docker ${REGISTRY_HOSTNAME} --quiet
                        echo "‚úÖ GCP authentication setup complete"
                    '''
                }
            }
        }

        stage('Test Applications') {
            parallel {
                stage('Test Backend') {
                    steps {
                        dir('server') {
                            script {
                                echo 'Testing Backend Application...'
                                sh '''
                                    npm install
                                    node -c server.js
                                    echo "‚úÖ Backend tests passed"
                                '''
                            }
                        }
                    }
                }
                stage('Test Frontend') {
                    steps {
                        dir('client') {
                            script {
                                echo 'Testing Frontend Application...'
                                sh '''
                                    npm install
                                    CI=true npm test -- --coverage --watchAll=false
                                    echo "‚úÖ Frontend tests passed"
                                '''
                            }
                        }
                    }
                }
            }
        }

        stage('Build Docker Images') {
            parallel {
                stage('Build Backend Image') {
                    steps {
                        dir('server') {
                            script {
                                echo 'Building Backend Docker Image...'
                                def backendImage = "${REGISTRY_HOSTNAME}/${PROJECT_ID}/${REPOSITORY_NAME}/healthcare-backend:${BUILD_NUMBER}"
                                sh """
                                    docker build -t ${backendImage} .
                                    docker tag ${backendImage} ${REGISTRY_HOSTNAME}/${PROJECT_ID}/${REPOSITORY_NAME}/healthcare-backend:latest
                                    echo "‚úÖ Backend image built successfully"
                                """
                            }
                        }
                    }
                }
                stage('Build Frontend Image') {
                    steps {
                        dir('client') {
                            script {
                                echo 'Building Frontend Docker Image...'
                                def frontendImage = "${REGISTRY_HOSTNAME}/${PROJECT_ID}/${REPOSITORY_NAME}/healthcare-frontend:${BUILD_NUMBER}"
                                sh """
                                    echo "Building with Atlas backend service URL..."
                                    docker build \\
                                        --build-arg REACT_APP_API_BASE_URL="http://healthcare-backend-service-atlas:5002" \\
                                        -t ${frontendImage} .
                                    docker tag ${frontendImage} ${REGISTRY_HOSTNAME}/${PROJECT_ID}/${REPOSITORY_NAME}/healthcare-frontend:latest
                                    echo "‚úÖ Frontend image built with Atlas service names"
                                """
                            }
                        }
                    }
                }
            }
        }

        stage('Push Images to Artifact Registry') {
            parallel {
                stage('Push Backend Image') {
                    steps {
                        script {
                            echo 'Pushing Backend Images...'
                            sh """
                                docker push ${REGISTRY_HOSTNAME}/${PROJECT_ID}/${REPOSITORY_NAME}/healthcare-backend:${BUILD_NUMBER}
                                docker push ${REGISTRY_HOSTNAME}/${PROJECT_ID}/${REPOSITORY_NAME}/healthcare-backend:latest
                                echo "‚úÖ Backend images pushed"
                            """
                        }
                    }
                }
                stage('Push Frontend Image') {
                    steps {
                        script {
                            echo 'Pushing Frontend Images...'
                            sh """
                                docker push ${REGISTRY_HOSTNAME}/${PROJECT_ID}/${REPOSITORY_NAME}/healthcare-frontend:${BUILD_NUMBER}
                                docker push ${REGISTRY_HOSTNAME}/${PROJECT_ID}/${REPOSITORY_NAME}/healthcare-frontend:latest
                                echo "‚úÖ Frontend images pushed"
                            """
                        }
                    }
                }
            }
        }

        stage('Deploy 3-Tier Atlas Architecture to GKE') {
            steps {
                script {
                    echo 'üöÄ Deploying Complete 3-Tier Architecture with Atlas to GKE...'
                    sh '''
                        export USE_GKE_GCLOUD_AUTH_PLUGIN=True

                        echo "Re-authenticating for cluster access..."
                        /usr/local/bin/gcloud auth activate-service-account --key-file=${SERVICE_ACCOUNT_KEY}
                        /usr/local/bin/gcloud config set project ${PROJECT_ID}

                        echo "Getting cluster credentials..."
                        /usr/local/bin/gcloud container clusters get-credentials ${CLUSTER_NAME} --location=${CLUSTER_LOCATION}

                        echo "Testing cluster connection..."
                        /usr/local/bin/kubectl cluster-info --request-timeout=10s

                        echo "========================================"
                        echo "üèóÔ∏è DEPLOYING 3-TIER ATLAS ARCHITECTURE"
                        echo "========================================"
                        echo "Tier 1: React Frontend (Web Layer)"
                        echo "Tier 2: Node.js Backend (API Layer)"
                        echo "Tier 3: MongoDB Atlas (Database Layer)"
                        echo ""

                        echo "üöÄ Deploying complete 3-tier Atlas configuration..."
                        echo "üìã Using Atlas-only deployment (NO local MongoDB)"

                        # Clean up any existing local MongoDB deployments
                        echo "üßπ Cleaning up any local MongoDB deployments..."
                        /usr/local/bin/kubectl delete deployment healthcare-mongodb -n healthcare-app --ignore-not-found=true
                        /usr/local/bin/kubectl delete service healthcare-mongodb-service -n healthcare-app --ignore-not-found=true
                        /usr/local/bin/kubectl delete pvc mongodb-data-pvc -n healthcare-app --ignore-not-found=true
                        /usr/local/bin/kubectl delete pvc mongodb-config-pvc -n healthcare-app --ignore-not-found=true

                        echo "‚òÅÔ∏è Deploying Atlas-only 3-tier architecture..."
                        /usr/local/bin/kubectl apply -f k8s/atlas-complete-deployment.yaml

                        echo "‚è≥ Waiting for deployments to be ready..."
                        echo "üîß Tier 2 (Backend API) deployment..."
                        /usr/local/bin/kubectl wait --for=condition=available deployment/healthcare-backend -n healthcare-app --timeout=300s

                        echo "üñ•Ô∏è Tier 1 (Frontend Web) deployment..."
                        /usr/local/bin/kubectl wait --for=condition=available deployment/healthcare-frontend -n healthcare-app --timeout=300s

                        echo "‚úÖ 3-Tier Atlas Architecture deployed successfully!"
                        echo "üìä Final deployment status:"
                        /usr/local/bin/kubectl get all -n healthcare-app

                        echo "üîç Verifying NO local MongoDB is running..."
                        if /usr/local/bin/kubectl get deployment healthcare-mongodb -n healthcare-app >/dev/null 2>&1; then
                            echo "‚ö†Ô∏è WARNING: Local MongoDB deployment still exists!"
                        else
                            echo "‚úÖ Confirmed: No local MongoDB deployment found"
                        fi
                    '''
                }
            }
        }

        stage('Health Check') {
            steps {
                script {
                    echo 'üîç Performing comprehensive 3-Tier Atlas health checks...'
                    sh '''
                        echo "=============================================="
                        echo "üè• HEALTHCARE 3-TIER ATLAS DEPLOYMENT STATUS"
                        echo "=============================================="

                        echo "üìä Pod Status (Detailed):"
                        /usr/local/bin/kubectl get pods -n healthcare-app -o wide
                        echo ""

                        echo "üåê Service Status (Detailed):"
                        /usr/local/bin/kubectl get services -n healthcare-app -o wide
                        echo ""

                        echo "üîç Atlas Configuration Status:"
                        /usr/local/bin/kubectl get configmaps -n healthcare-app
                        /usr/local/bin/kubectl get secrets -n healthcare-app
                        echo ""

                        echo "ü©∫ Health Check Tests:"

                        # Backend health check
                        echo "üîß Testing Backend Health (Atlas Connection)..."
                        if /usr/local/bin/kubectl exec deployment/healthcare-backend -n healthcare-app -- curl -f http://localhost:5002/health >/dev/null 2>&1; then
                            echo "‚úÖ Backend health check passed"
                        else
                            echo "‚ùå Backend health check failed"
                            echo "üìã Backend logs (last 5 lines):"
                            /usr/local/bin/kubectl logs deployment/healthcare-backend -n healthcare-app --tail=5 | sed "s/^/    /"
                        fi

                        # Frontend health check
                        echo "üñ•Ô∏è Testing Frontend Health..."
                        if /usr/local/bin/kubectl exec deployment/healthcare-frontend -n healthcare-app -- curl -f http://localhost:3000/ >/dev/null 2>&1; then
                            echo "‚úÖ Frontend health check passed"
                        else
                            echo "‚ùå Frontend health check failed"
                        fi

                        # Atlas connection verification
                        echo "‚òÅÔ∏è Verifying Atlas Database Connection..."
                        echo "üìã Recent backend logs (Atlas connection):"
                        /usr/local/bin/kubectl logs deployment/healthcare-backend -n healthcare-app --tail=10 | grep -i "mongodb\|atlas\|connected\|database" | sed "s/^/    /" || echo "    ‚ÑπÔ∏è No recent DB connection logs"

                        # Check LoadBalancer IP
                        FRONTEND_IP=$(/usr/local/bin/kubectl get service healthcare-frontend-service -n healthcare-app -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "PENDING")

                        echo ""
                        echo "üåç EXTERNAL ACCESS INFORMATION:"
                        echo "=============================================="

                        if [ "$FRONTEND_IP" != "PENDING" ] && [ "$FRONTEND_IP" != "" ] && [ "$FRONTEND_IP" != "null" ]; then
                            echo "üéâ 3-TIER ATLAS HEALTHCARE APPLICATION DEPLOYED!"
                            echo ""
                            echo "üåê Frontend (Tier 1): http://$FRONTEND_IP/"
                            echo "üîß Backend (Tier 2): healthcare-backend-service:5002 (Internal)"
                            echo "‚òÅÔ∏è Database (Tier 3): MongoDB Atlas (Cloud)"
                            echo ""
                            echo "‚úÖ Complete 3-tier architecture is LIVE!"
                            echo "‚úÖ No local database dependencies"
                            echo "‚úÖ Cloud-native Atlas deployment"
                            echo "‚úÖ Auto-scaling enabled"

                            # Test external access
                            echo ""
                            echo "üåê Testing external access..."
                            if timeout 10 curl -f -s "http://$FRONTEND_IP/" >/dev/null 2>&1; then
                                echo "‚úÖ External frontend access working"
                            else
                                echo "‚ö†Ô∏è External frontend access test timed out (normal for new deployment)"
                            fi
                        else
                            echo "üéâ 3-TIER ATLAS ARCHITECTURE DEPLOYED!"
                            echo ""
                            echo "‚è≥ LoadBalancer IP assignment in progress..."
                            echo ""
                            echo "üîß Test the application locally:"
                            echo "   kubectl port-forward service/healthcare-frontend-service 3000:80 -n healthcare-app"
                            echo "   Then access: http://localhost:3000"
                            echo ""
                            echo "Architecture Components:"
                            echo "‚úÖ Tier 1: React Frontend (Port 3000)"
                            echo "‚úÖ Tier 2: Node.js Backend (Port 5002)"
                            echo "‚úÖ Tier 3: MongoDB Atlas (Cloud)"
                        fi

                        echo ""
                        echo "üìà Resource Usage:"
                        /usr/local/bin/kubectl top pods -n healthcare-app 2>/dev/null || echo "‚ÑπÔ∏è Metrics not available yet"

                        echo ""
                        echo "üîÑ Auto-scaling Status:"
                        /usr/local/bin/kubectl get hpa -n healthcare-app 2>/dev/null || echo "‚ÑπÔ∏è HPA not configured yet"

                        echo ""
                        echo "üóÑÔ∏è Final Atlas Verification:"
                        echo "‚úÖ NO local MongoDB running"
                        echo "‚úÖ Backend configured for Atlas"
                        echo "‚úÖ 3-tier architecture complete"
                        echo "=============================================="
                    '''
                }
            }
        }
    }

    post {
        always {
            echo 'Cleaning up...'
            sh 'docker system prune -f || true'
        }
        success {
            echo 'Atlas deployment completed successfully!'
            script {
                sh '''
                    echo "=========================================="
                    echo "üéâ 2-TIER ATLAS ARCHITECTURE DEPLOYED"
                    echo "=========================================="
                    echo "‚úÖ Backend Tier: Node.js API (healthcare-backend-atlas)"
                    echo "‚úÖ Frontend Tier: React App (healthcare-frontend-atlas)"
                    echo "‚úÖ Database Tier: MongoDB Atlas (External)"
                    echo ""
                    FRONTEND_IP=$(kubectl get service healthcare-frontend-service-atlas -n healthcare-app -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "PENDING")
                    if [ "$FRONTEND_IP" != "PENDING" ] && [ "$FRONTEND_IP" != "" ]; then
                        echo "üåê Healthcare App: http://$FRONTEND_IP/"
                    else
                        echo "üåê Healthcare App: LoadBalancer IP pending"
                    fi
                    echo ""
                    echo "Minimal architecture with Atlas - No K8s DB issues!"
                    echo "=========================================="
                '''
            }
        }
        failure {
            echo '‚ùå Atlas deployment failed - check logs above for details'
        }
    }
}